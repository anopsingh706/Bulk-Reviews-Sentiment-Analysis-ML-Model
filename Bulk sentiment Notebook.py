# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WZFbXZcztkF_vNdJYy0OB-GphT96RYkn
"""

from google.colab import files

uploaded = files.upload()  # T

import pandas as pd

df = pd.read_excel('Amazon Reviews.xlsx')
df.head()

df = df.drop(columns=['rr'])

df['Sentiment'].value_counts()

def convert_to_sentiment(rating):
    if rating in [4, 5]:
        return 1  # Positive
    elif rating in [1, 2]:
        return 0  # Negative
    else:
        return None  # Neutral, can be dropped

df['binary_sentiment'] = df['Sentiment'].apply(convert_to_sentiment)

# Drop rows with neutral sentiment (rating = 3)
df = df.dropna(subset=['binary_sentiment'])

# Convert float labels to int
df['binary_sentiment'] = df['binary_sentiment'].astype(int)

df = df.dropna(subset=['binary_sentiment']).copy()  # Create a fresh copy
df.loc[:, 'binary_sentiment'] = df['binary_sentiment'].astype(int)

from sklearn.model_selection import train_test_split

X = df['cleaned_review']
y = df['binary_sentiment']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

print(df.columns)

import re

def clean_text(text):
    text = str(text).lower()
    text = re.sub(r'<.*?>', '', text)  # remove HTML tags
    text = re.sub(r'[^a-z\s]', '', text)  # remove punctuation/numbers
    return text

df['cleaned_review'] = df['Review'].apply(clean_text)

df.head()

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Split data
X = df['cleaned_review']
y = df['binary_sentiment']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# TF-IDF Vectorization
vectorizer = TfidfVectorizer(max_features=5000)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train Logistic Regression model
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# Predict & Evaluate
y_pred = model.predict(X_test_vec)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

def predict_sentiment(review_text):
    cleaned = clean_text(review_text)
    vec = vectorizer.transform([cleaned])
    pred = model.predict(vec)[0]
    return "Positive" if pred == 1 else "Negative"

# Example:
print(predict_sentiment("This product was a total waste of money."))

import seaborn as sns
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Negative", "Positive"], yticklabels=["Negative", "Positive"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

import joblib

# Save the model
joblib.dump(model, 'sentiment_model.joblib')

# Save the vectorizer (important to preprocess new input the same way)
joblib.dump(vectorizer, 'tfidf_vectorizer.joblib')

from google.colab import files

files.download('sentiment_model.joblib')
files.download('tfidf_vectorizer.joblib')



